[build-system]
requires = [
  "setuptools >= 61",
  "setuptools_scm[toml] >= 8",
]
build-backend = 'setuptools.build_meta'

[project]
name="NREL-Scraper"
dynamic = ["version"]
description = "National Renewable Energy Laboratory's (NREL's) Python implementation of the Ordinance Database (OrdinanceDB)"
readme = "README.rst"
authors = [
  {name = "Paul Pinchuk", email = "ppinchuk@nrel.gov"},
  {name = "Guilherme Castelão", email = "gpimenta@nrel.gov"},
]
maintainers = [
  {name = "Paul Pinchuk", email = "ppinchuk@nrel.gov"},
  {name = "Guilherme Castelão", email = "gpimenta@nrel.gov"},
]
# license = {text = "BSD-3-Clause"}
keywords = ["NREL", "Ordinance", "Database"]
requires-python = ">= 3.12"
classifiers=[
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
#   "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dependencies = [
  "beautifulsoup4>=4.12.3,<5",
  "click>=8.1.7,<9",
  "fake-useragent>=1.4.0,<2",
  "html2text>=2024.2.26,<2025",
  "langchain>=0.3.7,<0.4",
  "lxml>=5.3.0,<6",
  "networkx>=3.4.2,<4",
  "nltk>=3.9.1,<4",
  "nrel-elm>=0.0.8,<1",
  "nrel-rex>=0.2.84,<0.3",
  "numpy>=1.26.4,<2",
  "openai>=1.1.0",
  "pandas>=2.2.3,<3",
  "pdf2image>=1.17.0,<2",
  "pdftotext>=2.2.2,<3",
  "playwright>=1.47.0,<2",
  "pypdf2>=3.0.1,<4",
  "python-slugify>=8.0.4,<9",
  "scipy>=1.14.1,<2",
  "tabulate>=0.9.0,<0.10",
  "tiktoken>=0.8.0,<0.9",
]

[project.optional-dependencies]
ocr = [
  "pytesseract>=0.3.13,<0.4"
]
dev = [
  "build>=0.10",
  "pipreqs",
]
doc = [
  "ghp-import>=2.1",
  "jupyter-book>=1.0.2",
  "make>=0.1",
  "sphinx-click>=5.1",
  "sphinx-copybutton>=0.5",
  "sphinx-tabs>=3.4",
  "sphinxcontrib-mermaid>=0.9.2",
]
test = [
  "openpyxl>=3.1.3",
  "pytest-asyncio>=0.25.2,<0.26",
  "pytest>=8.3.3,<9",
  "pytest-cases>=3.8.6,<4",
  "pytest-cov>=6.0.0,<7",
  "pytest-mock>=3.14.0,<4",
  "pytest-profiling>=1.7.0,<2",
  "pytest-xdist>=3.0",
  "snakeviz>=2.2.2,<3",
  "tox>=4.23.2,<5",
]

[project.urls]
# homepage = "https://www.nrel.gov/"
documentation = "https://nrel.github.io/NREL-ordinance-DB/"
repository = "https://github.com/NREL/NREL-ordinance-DB"

[tool.setuptools]
packages = ["scraper"]

[tool.setuptools_scm]
version_file = "scraper/_version.py"

[tool.pixi.project]
channels = ["conda-forge", "microsoft", "anaconda", "main"]
platforms = ["osx-arm64", "osx-64", "linux-64", "win-64"]

[tool.pixi.environments]
default = { features = ["rust-dev", "python-default"], solve-group = "default" }
rdev = { features = ["rust-dev"], solve-group = "rust" }
pdev = { features = ["python-default", "python-dev", "python-test", "python-doc", "python-anthropic", "ocr", "dev", "test", "doc"], solve-group = "python" }
ptest = { features = ["python-test", "test"], solve-group = "python" }
pdoc = { features = ["python-doc", "doc"], solve-group = "python" }

[tool.pixi.feature.rust-dev.dependencies]
rust = ">=1.82.0,<1.83"
cxx-compiler = ">=1.8.0,<2"

[tool.pixi.feature.python-default.dependencies]
aiohttp = ">=3.11.6,<4"
beautifulsoup4 = ">=4.12.3,<5"
click = ">=8.1.7,<9"
fake-useragent = ">=1.4.0,<2"
html2text = ">=2024.2.26,<2025"
ipython = ">=8.29.0,<9"
langchain = ">=0.3.7,<0.4"
lxml = ">=5.3.0,<6"
networkx = ">=3.4.2,<4"
nltk = ">=3.9.1,<4"
numpy = ">=1.26.4,<2"
openai = ">=1.1.0"
pandas = ">=2.2.3,<3"
pdf2image = ">=1.17.0,<2"
pdftotext = ">=2.2.2,<3"
playwright = ">=1.47.0,<2"
poppler = ">=24.8.0,<25"
pypdf2 = ">=3.0.1,<4"
pytesseract = ">=0.3.13,<0.4"
python = ">=3.12"
python-slugify = ">=8.0.4,<9"
scipy = ">=1.14.1,<2"
tabulate = ">=0.9.0,<0.10"

[tool.pixi.feature.python-default.pypi-dependencies]
NREL-Scraper = { path = ".", editable = true}

[tool.pixi.feature.python-dev.dependencies]
jupyter = ">=1.0.0,<1.1"
pipreqs = ">=0.4.13,<0.5"
ruff = ">=0.8.0,<0.9"
twine = ">=5.1.1,<6"

[tool.pixi.feature.python-test.dependencies]
pytest = ">=8.3.3,<9"
pytest-asyncio = ">=0.25.2,<0.26"
pytest-cases = ">=3.8.6,<4"
pytest-cov = ">=6.0.0,<7"
pytest-mock = ">=3.14.0,<4"
pytest-profiling = ">=1.7.0,<2"
pytest-xdist = ">=3.6.1,<4"
snakeviz = ">=2.2.2,<3"
tox = ">=4.23.2,<5"

[tool.pixi.feature.python-test.tasks]
test = "pytest --pdb --durations=20 tests"
# ut = "pytest --pdb --durations=20 tests/unit"
# it = "pytest --pdb --durations=20 tests/integration"

[tool.pixi.feature.python-doc.dependencies]
ghp-import = ">=2.1.0,<3"
jupyter-book = ">=1.0.3,<2"
make = ">=4.4.1,<5"
sphinx-click = ">=6.0.0,<7"
sphinx-copybutton = ">=0.5.2,<0.6"
sphinx-tabs = ">=3.4.1,<4"
sphinxcontrib-mermaid = ">=1.0.0,<2"

[tool.pixi.feature.python-anthropic.dependencies]
anthropic = ">=0.40.0,<0.41"
botocore = ">=1.35.72,<2"
boto3 = ">=1.35.71,<2"

[tool.ruff]
line-length = 79

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint]
preview = true
select = [
  "A", # flake8-builtins
  "B", # flake8-bugbear
  "ARG", # flake8-unused-arguments
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "COM", # flake8-commas
  "D", # pydocstyle
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "F", # Pyflakes
  "FURB", # refurb
  "FLY", #  flynt
  "G", # flake8-logging-format
  "I", # isort
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "NPY", # numpy-specific
  "PD", # pandas-vet
  "PERF", # Perflint
  "PIE", # flake8-pie
  "PL", # Pylint
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # Ruff-specific rules
  "S", # flake8-bandit
  "SLF", # flake8-self
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports (absolute imports)
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W", # Warning
]
ignore = [
  "B028", # no-explicit-stacklevel
  "COM812", # missing-trailing-comma (incompatible with formatter)
  "D105", # undocumented-magic-method
  "D205", # blank-line-after-summary
  "D202", # no-blank-lines-after-function
  "D210", # surrounded-whitespace
  "D400", # first-line-should-end-with-a-period
  "D401", # non-imperative-mood
  "D403", # first-line-capitalized
  "FURB140", # reimplemented-starmap
  "I001", # unsorted-imports
  "PYI024", # collections-named-tuple
  "RUF012", # mutable-class-default
  "RUF031", # incorrectly-parenthesized-tuple-in-subscript
  "S101", # assert
  "S324", # hashlib-insecure-hash-function
  "S403", # suspicious-pickle-import
  "TRY003", # raise-vanilla-args
]

[tool.ruff.lint.pycodestyle]
max-doc-length = 72

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
  "F401", # unused-import
]
"tests/**.py" = [
  "ARG001", # unused-function-argument
  "INP001", # implicit-namespace-package
  "PLR0914", # too-many-locals
  "PLR0915", # too-many-statements
  "PLR2004", # magic-value-comparison
  "PLR6301", # no-self-use
  "SLF001", # private-member-access
  "W505", # doc-line-too-long
]

[tool.ruff.lint.pylint]
max-args = 10
max-positional-args = 10

[tool.coverage.run]
branch = true

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
  # Have to re-enable the standard pragma
  "pragma: no cover",

  # Don't complain about missing debug-only code:
  "if self\\.debug",

  # Don't complain about repr methods
  "def __repr__",
  "def _repr_markdown_",

  # Don't complain about data I/O code
  "def load*",
  "def _load*",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if __name__ == .__main__.:",

  # Don't complain about abstract methods, they aren't run:
  "@(abc\\.)?abstractmethod",

  # Don't complain about logging debugging functions
  "def print_logging_info*",
  "def __cls_name",
]

omit = [
  # omit test files
  "tests/*",
  # omit init files
  "__init__.py",
  # omit version file
  "_version.py",
  # omit log file copied over from other repo
  "scraper/utilities/log.py",
  # omit config loading code for now
  "scraper/utilities/config.py",
  # omit pixi files
  ".pixi/*",
]


[tool.pytest.ini_options]
addopts = "--cov=scraper --cov-report=html --cov-report=xml:coverage.xml --disable-warnings --cov-fail-under=80"
testpaths = [
  "tests"
  # "tests/unit",
  # "tests/integration",
]
