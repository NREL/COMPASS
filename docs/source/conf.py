"""Documentation config file"""
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/stable/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

sys.path.insert(0, os.path.abspath("../../"))

# -- Project information -----------------------------------------------------

project = "COMPASS"
copyright = "2025, Alliance for Sustainable Energy, LLC"
author = "NREL: Paul Pinchuk, Guilherme Pimenta Castelao"

pkg = os.path.dirname(os.path.abspath(os.path.dirname(__file__)))
pkg = os.path.dirname(pkg)
sys.path.append(pkg)

from compass._version import __version_tuple__ as v

# The short X.Y version
version = ".".join([str(num) for num in v[:3]])
# The full version, including alpha/beta/rc tags
release = version

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinxcontrib.mermaid",  # Must stay at top of list for rendering to work
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
    "sphinx.ext.coverage",
    "sphinx.ext.mathjax",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx.ext.napoleon",
    "sphinx_click.ext",
    "sphinx_tabs.tabs",
    "sphinx_copybutton",
]

intersphinx_mapping = {
    "elm": ("https://nrel.github.io/elm", None),
    "lc": ("https://python.langchain.com/api_reference/", None),
    "matplotlib": ("https://matplotlib.org/stable", None),
    "networkx": ("https://networkx.org/documentation/stable", None),
    "numpy": ("https://numpy.org/doc/stable/", None),
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable", None),
    "plotly": ("https://plotly.com/python-api-reference", None),
    "psycopg": ("https://www.psycopg.org/psycopg3/docs", None),
    "python": ("https://docs.python.org/3/", None),
    "sqlalchemy": ("https://docs.sqlalchemy.org/en/20/", None),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ".rst"

# source_parsers = {'.md': MarkdownParser}

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = [
    "**.ipynb_checkpoints",
    "**__pycache__**",
    # to ensure that include files (partial pages) aren't built, exclude them
    # https://github.com/sphinx-doc/sphinx/issues/1965#issuecomment-124732907
    "**/includes/**",
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# Avoid errors with self-signed certificates
tls_verify = False

# Avoid warning about api.rst not in TOC
suppress_warnings = ["toc.not_included"]

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {"navigation_depth": 4, "collapse_navigation": False}
html_css_file = ["custom.css"]

html_context = {
    "display_github": True,
    "github_user": "nrel",
    "github_repo": "COMPASS",
    "github_version": "main",
    "conf_py_path": "/docs/source/",
    "source_suffix": source_suffix,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "compassdoc"

# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "COMPASS.tex",
        "COMPASS Documentation",
        "Paul Pinchuk, Guilherme Pimenta Castelao",
        "manual",
    ),
]

# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "COMPASS", "COMPASS Documentation", [author], 1)]

# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "COMPASS",
        "COMPASS Documentation",
        author,
        "COMPASS",
        "Geospatial Analysis Pipelines.",
        "Miscellaneous",
    ),
]


def skip_external_methods(app, what, name, obj, skip, options):
    if name in {
        "clear",
        "pop",
        "popitem",
        "setdefault",
        "update",
    } and "MutableMapping" in str(obj):
        return True

    if name in {"copy", "fromkeys"} and "UsageTracker" in str(obj):
        return True

    if name in {"items", "keys", "values"} and "Mapping" in str(obj):
        return True

    if name == "get" and "UserDict" in str(obj):
        return True

    if name in {
        "model_dump_json",
        "model_json_schema",
        "model_dump",
        "model_construct",
        "model_copy",
        "model_fields",
        "model_computed_fields",
    } and "BaseModel" in str(obj):
        return True
    return None


def setup(app):
    app.connect("autodoc-skip-member", skip_external_methods)


# -- Extension configuration -------------------------------------------------

autosummary_generate = True  # Turn on sphinx.ext.autosummary
autoclass_content = "both"  # Add __init__ doc (ie. params) to class summaries
autodoc_member_order = "bysource"
autodoc_inherit_docstrings = True  # If no docstring, inherit from base class
add_module_names = False  # Remove namespaces from class/method signatures
# Remove 'view source code' from top of page (for html, not python)
html_show_sourcelink = False
mermaid_version = "11.6.0"
numpy_show_class_member = True
napoleon_google_docstring = False
napoleon_use_ivar = False
napoleon_use_rtype = False
napoleon_preprocess_types = True
napoleon_use_param = True
napoleon_type_aliases = {
    # general terms
    "sequence": ":term:`sequence`",
    "iterable": ":class:`~collections.abc.Iterable`",
    "callable": ":py:func:`callable`",
    "dict_like": ":term:`dict-like <mapping>`",
    "dict-like": ":term:`dict-like <mapping>`",
    "path-like": ":term:`path-like <path-like object>`",
    "mapping": ":term:`mapping`",
    "file-like": ":term:`file-like <file-like object>`",
    # special terms
    # "same type as caller": "*same type as caller*",  # does not work, yet
    # "same type as values": "*same type as values*",  # does not work, yet
    # stdlib type aliases
    "MutableMapping": "~collections.abc.MutableMapping",
    "sys.stdout": ":obj:`sys.stdout`",
    "timedelta": "~datetime.timedelta",
    "string": ":class:`string <str>`",
    # numpy terms
    "array_like": ":term:`array_like`",
    "array-like": ":term:`array-like <array_like>`",
    "scalar": ":term:`scalar`",
    "array": ":term:`array`",
    "hashable": ":term:`hashable <name>`",
    # matplotlib terms
    "color-like": ":py:func:`color-like <matplotlib.colors.is_color_like>`",
    "matplotlib colormap name": ":doc:`matplotlib colormap name <matplotlib:gallery/color/colormap_reference>`",
    "matplotlib axes object": ":py:class:`matplotlib axes object <matplotlib.axes.Axes>`",
    "colormap": ":py:class:`colormap <matplotlib.colors.Colormap>`",
    # objects without namespace: numpy
    "ndarray": "~numpy.ndarray",
    "MaskedArray": "~numpy.ma.MaskedArray",
    "dtype": "~numpy.dtype",
    "ComplexWarning": "~numpy.ComplexWarning",
    # objects without namespace: pandas
    "Index": "~pandas.Index",
    "MultiIndex": "~pandas.MultiIndex",
    "CategoricalIndex": "~pandas.CategoricalIndex",
    "TimedeltaIndex": "~pandas.TimedeltaIndex",
    "DatetimeIndex": "~pandas.DatetimeIndex",
    "IntervalIndex": "~pandas.IntervalIndex",
    "Series": "~pandas.Series",
    "DataFrame": "~pandas.DataFrame",
    "Categorical": "~pandas.Categorical",
    "Path": "~pathlib.Path",
    # objects with abbreviated namespace (from pandas)
    "pd.Index": "~pandas.Index",
    "pd.NaT": "~pandas.NaT",
    # Langchain
    "LCTextSplitter": ":class:`~langchain_text_splitters.base.TextSplitter`",
    "RCTextSplitter": ":class:`~langchain_text_splitters.character.RecursiveCharacterTextSplitter`",
    # fixing ELM docstrings
    "nx.DiGraph": ":class:`networkx.DiGraph`",
    "ApiBase": ":class:`~elm.base.ApiBase`",
    # objects from COMPASS
    "AsyncDecisionTree": ":class:`~compass.common.tree.AsyncDecisionTree`",
    "Jurisdiction": ":class:`~compass.utilities.location.Jurisdiction`",
    "LLMCaller": ":class:`~compass.llm.calling.LLMCaller`",
    "ChatLLMCaller": ":class:`~compass.llm.calling.ChatLLMCaller`",
    "StructuredLLMCaller": ":class:`~compass.llm.calling.StructuredLLMCaller`",
    "Service": ":class:`~compass.services.base.Service`",
    "LLMService": ":class:`~compass.services.base.LLMService`",
    "OpenAIService": ":class:`~compass.services.openai.OpenAIService`",
    "TimeBoundedUsageTracker": ":class:`~compass.services.usage.TimeBoundedUsageTracker`",
    "UsageTracker": ":class:`~compass.services.usage.UsageTracker`",
    "ParseChunksWithMemory": ":class:`~compass.validation.content.ParseChunksWithMemory`",
    "WindOrdinanceTextExtractor": ":class:`~compass.extraction.wind.ordinance.WindOrdinanceTextExtractor`",
}
